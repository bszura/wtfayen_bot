const { Client, Intents } = require('discord.js-selfbot-v13');
const express = require('express');
const app = express();
const PORT = 8080;
const Discord = require('discord.js-selfbot-v13');

// Konfiguracja klienta Discord
const client = new Client({
  checkUpdate: false,
});

// Serwer HTTP do utrzymania aktywno≈õci na Render (dla darmowego tieru)
app.get('/', (req, res) => {
  res.send('Self-bot dzia≈Ça na Render! üöÄ');
});

app.listen(PORT, () => {
  console.log(`Serwer pingujƒÖcy dzia≈Ça na porcie ${PORT}`);
});

// Obs≈Çuga zdarze≈Ñ Discorda
client.once('ready', () => {
  console.log(`Zalogowano jako ${client.user.tag}!`);
});

// Reklama serwera
const serverAd = ` AYEN SERVICES
OFERUJEMY:
üõí„ÉªWymiany Bl1k, Krypt0waluty, Payp4l, Paysafecard itp.
üõí„ÉªUs≈Çug1 D1scord: N1tro B00st, Bas1c, B00sty na S3rver, M3mbers√≥w, k0nta Ag3d, D3koracje
üõí„ÉªK0nta: N3tflix, Sp0tify, D1sney, Hb0max, Pr1me Video, Ch4tGPT, M1necraft, K0nta Vpn
üõí„ÉªDysk1 z gotowymi odpowiedziami do sprawdz1an√≥w
üõí„ÉªOferta r0blox (r0buxy, p3ty itd.)
üõí„ÉªP3lerynki Opt1fine do Min3craft.
üõí„ÉªW3ryfikacje numeru t3lefonu, r3jestracje kart S1M.

OFERUJEMY R√ìWNIE≈ª:
üí∏„ÉªStrefe klienta gdzie znajdziesz konkursy na p1eniƒÖdze bez ≈ºadnych wymaga≈Ñ.
üí∏„ÉªDarmowe kursy, met0dy, kt√≥re inni sprzedajƒÖ za p1eniƒÖdze.
üí∏„ÉªKonkursy dla ka≈ºdego!
https://discord.gg/Xk3cfsj4 `;

// Mapowanie kana≈Ç√≥w i ich odpowiednich interwa≈Ç√≥w w milisekundach
const channelsWithIntervals = {
  '726494920780808233': 2 * 61 * 60 * 1000,
  '726492930730098830': 1 * 61 * 60 * 1000,
  '726497005454491750': 1 * 61 * 60 * 1000,
  '1346609319877279794': 1 * 61 * 1000,
  '1346609318476255293': 15 * 61 * 1000,
  '1346609275761332325': 10 * 61 * 1000,
  '1346609268375158834': 10 * 61 * 1000,
  '1346609266987110451': 2 * 61 * 60 * 1000,
  '1328101594566496277': 30 * 61 * 1000,
  '1328101925429706764': 30 * 61 * 1000,
  '1328102005792571553': 30 * 61 * 1000,
};

// Funkcja ustawiajƒÖca wysy≈Çanie wiadomo≈õci w odpowiednich interwa≈Çach
client.once('ready', () => {
  console.log(`Bot ${client.user.tag} jest gotowy.`);

  Object.entries(channelsWithIntervals).forEach(([channelId, interval]) => {
    setInterval(async () => {
      const channel = client.channels.cache.get(channelId);
      if (channel) {
        await channel.send(serverAd);
      } else {
        console.error(`Nie znaleziono kana≈Çu o ID ${channelId}`);
      }
    }, interval);
  });
});

// Lista u≈ºytkownik√≥w partnerstwa i ich czas ostatniego partnerstwa
const partneringUsers = new Map();
const partnershipTimestamps = new Map();

client.on('messageCreate', async (message) => {
  if (!message.guild && !message.author.bot && message.author.id !== client.user.id) {
    const now = Date.now();
    const lastPartnership = partnershipTimestamps.get(message.author.id);

    if (lastPartnership && now - lastPartnership < 7 * 24 * 60 * 60 * 1000) {
      await message.channel.send("‚è≥ Musisz poczekaƒá tydzie≈Ñ przed kolejnym partnerstwem.");
      return;
    }

    if (!partneringUsers.has(message.author.id)) {
      partneringUsers.set(message.author.id, null);
      await message.channel.send("üåé Je≈õli chcesz nawiƒÖzaƒá partnerstwo, wy≈õlij swojƒÖ reklamƒô.");
    } else {
      const userAd = partneringUsers.get(message.author.id);

      if (userAd === null) {
        partneringUsers.set(message.author.id, message.content);
        await message.channel.send(`‚úÖ Wstaw naszƒÖ reklamƒô:\n${serverAd}`);
        await message.channel.send("‚è∞ Daj znaƒá, gdy wstawisz reklamƒô!");
      } else if (/wstawi|ju≈º|gotowe|juz/i.test(message.content)) {
        await message.channel.send("Czy wymagane jest do≈ÇƒÖczenie na tw√≥j serwer?");
        const filter = m => m.author.id === message.author.id;
        const reply = await message.channel.awaitMessages({ filter, max: 1, time: 60000 }).catch(() => null);

        if (reply && !reply.first().content.toLowerCase().includes('nie')) {
          await message.channel.send("M√≥j w≈Ça≈õciciel @wtfayen nied≈Çugo do≈ÇƒÖczy.");
          const notificationUser = await client.users.fetch('782647700403257375');
          await notificationUser.send(`Wymagane do≈ÇƒÖczenie:\n${userAd}`);
        }

        const guild = client.guilds.cache.get('1363917717836529845');
        if (!guild) {
          await message.channel.send("‚ùï Nie znaleziono serwera.");
          return;
        }

        const member = await guild.members.fetch(message.author.id).catch(() => null);
        if (!member) {
          await message.channel.send("‚ùï Do≈ÇƒÖcz na serwer, aby kontynuowaƒá!");
          return;
        }

        const channel = guild.channels.cache.find(ch => ch.name === '„Ä°üíº„Éªpartnerstwa' && ch.isText());
        if (!channel) {
          await message.channel.send("Nie znaleziono kana≈Çu '„Ä°üíº„Éªpartnerstwa'.");
          return;
        }

        await channel.send(`${userAd}\n\nPartnerstwo z: ${member}`);
        await message.channel.send("‚úÖ Dziƒôkujemy za partnerstwo! W razie pyta≈Ñ skontaktuj siƒô z .b_r_tech.");

        partnershipTimestamps.set(message.author.id, now);
        partneringUsers.delete(message.author.id);
      }
    }
  }
});

// Obs≈Çuga b≈Çƒôd√≥w
client.on('error', (error) => {
  console.error('B≈ÇƒÖd Discorda:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('Nieobs≈Çu≈ºony b≈ÇƒÖd:', error);
});

// Logowanie do Discorda
client.login(process.env.DISCORD_TOKEN);
